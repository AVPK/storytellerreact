{"version":3,"file":"static/js/477.bf68e191.chunk.js","mappings":"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","sources":["DemoPages/RandevuTakip/Notifications/Examples/OfficeAvailableDates.js","DemoPages/RandevuTakip/Notifications/Examples/TrackingDatePicker.js","DemoPages/RandevuTakip/Notifications/index.js","DemoPages/RandevuTakip/index.js"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardFooter,\n  Alert,\n} from \"reactstrap\";\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\n\nimport classnames from \"classnames\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { valid } from \"chroma-js\";\nimport { date } from \"date-arithmetic\";\n\nclass OfficeAvailableDates extends Component {\n  state = OfficeAvailableDates.getDefaultState();\n\n  static getDefaultState() {\n    return {\n      activeTab: 0,\n      data: [\n        {\n          Office: \"Altunzade\",\n          AvailableDates: [\"2023-10-20\", \"2023-10-20\", \"2023-10-20\"],\n        },\n        {\n          Office: \"Altunzade\",\n          AvailableDates: [\"2023-10-20\", \"2023-10-20\", \"2023-10-20\"],\n        },\n      ],\n    };\n  }\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Row>\n          <Col md=\"12\">\n            <Card className=\"main-card mb-3\">\n              <CardBody>\n                <Nav pills fill>\n                  {this.props.data.officeData.map((popover, i) => {\n                    return (\n                      <NavItem>\n                        <NavLink\n                          href=\"#\"\n                          className={classnames({\n                            active: this.state.activeTab === i,\n                          })}\n                          onClick={() => {\n                            this.toggle(i);\n                          }}\n                        >\n                          {popover.officeName}\n                        </NavLink>\n                      </NavItem>\n                    );\n                  })}\n                </Nav>\n                <TabContent activeTab={\"\" + this.state.activeTab}>\n                  {this.props.data.officeData.map((popover, i) => {\n                    return (\n                      <TabPane tabId={\"\" + i}>\n                        {popover.dates.map((date, i) => {\n                          return (\n                            <Alert color=\"success\">\n                              <a\n                                style={{ marginLeft: \"50px\" }}\n                                className=\"alert-link\"\n                              >\n                                {date.split(\"T\")[0]}\n                              </a>\n                            </Alert>\n                          );\n                        })}\n                        {popover.dates.length == 0 && (\n                          <Alert color=\"danger\">\n                            <a\n                              style={{ marginLeft: \"50px\" }}\n                              className=\"alert-link\"\n                            >\n                              UYGUN RANDEVU YOK\n                            </a>\n                          </Alert>\n                        )}\n                      </TabPane>\n                    );\n                  })}\n                </TabContent>\n              </CardBody>\n              <CardFooter>\n                Son güncelleme zamanı : {this.getMinuteDifference()} dakika önce\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n  getMinuteDifference = () => {\n    let date1 = new Date();\n    let date2 = new Date(\n      this.props.data.officeData[this.state.activeTab].updateDate\n    );\n    const diffInMilliseconds = Math.abs(date2 - date1);\n    const diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60));\n    return diffInMinutes;\n  };\n}\n\nfunction convertUtcToLocal(utcDateStr) {\n  const utcDate = new Date(utcDateStr);\n  const localDate = new Date(\n    utcDate.getTime() + utcDate.getTimezoneOffset() * 60 * 1000\n  );\n  return localDate;\n}\nfunction formatReadableDate(inputDate) {\n  console.log(inputDate);\n  inputDate = formatUTCtoLocal(inputDate);\n  console.log(inputDate);\n  const currentDate = new Date();\n  const inputTime = new Date(inputDate);\n\n  const timeDifference = currentDate - inputTime;\n\n  // Dakika cinsinden farkı hesapla\n  const minutesDifference = Math.floor(timeDifference / (1000 * 60));\n\n  if (minutesDifference < 1) {\n    return \"Şimdi\";\n  } else if (minutesDifference === 1) {\n    return \"1 dakika önce\";\n  } else if (minutesDifference < 60) {\n    return `${minutesDifference} dakika önce`;\n  } else if (minutesDifference < 1440) {\n    const hoursDifference = Math.floor(minutesDifference / 60);\n    return `${hoursDifference} saat önce`;\n  } else if (minutesDifference < 43200) {\n    const daysDifference = Math.floor(minutesDifference / 1440);\n    return `${daysDifference} gün önce`;\n  } else {\n    const formattedDate = inputTime.toLocaleString(\"tr-TR\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n    });\n    return `Son güncelleme zamanı: ${formattedDate}`;\n  }\n}\nfunction formatUTCtoLocal(inputDate) {\n  const inputTime = new Date(inputDate);\n\n  const localTime = new Date(inputTime);\n  localTime.setMinutes(localTime.getMinutes() - localTime.getTimezoneOffset());\n\n  const currentDate = new Date();\n  const timeDifference = currentDate - localTime;\n\n  // Diğer adımlar aynı şekilde devam eder...\n  // ...\n  // ...\n\n  return localTime;\n}\nexport default OfficeAvailableDates;\n","import React, { Fragment } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport {\n  Alert,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardFooter,\n  InputGroupText,\n} from \"reactstrap\";\nimport { InputGroup, Button, Input } from \"reactstrap\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { ModalTitle } from \"react-bootstrap\";\nimport { SubTitle } from \"chart.js\";\nconst days = [\"Pt\", \"Sa\", \"Ça\", \"Pe\", \"Cu\", \"Ct\", \"Pz\"];\nconst months = [\n  \"Ocak\",\n  \"Şubat\",\n  \"Mart\",\n  \"Nisan\",\n  \"Mayıs\",\n  \"Haziran\",\n  \"Temmuz\",\n  \"Ağustos\",\n  \"Eylül\",\n  \"Ekim\",\n  \"Kasım\",\n  \"Aralık\",\n];\n\nconst locale = {\n  localize: {\n    day: (n) => days[n],\n    month: (n) => months[n],\n  },\n  formatLong: {\n    date: () => \"mm/dd/yyyy\",\n  },\n};\nclass OfficeTrackingDates extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: true,\n      startDate: new Date(props.data.trackingStartDate),\n      endDate: new Date(props.data.trackingEndDate),\n      changed: false,\n    };\n\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  updateDate = (serviceType, startDate, endDate) => {\n    var requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n    fetch(\n      \"http://triviastars-env.eba-vqcrvzer.eu-central-1.elasticbeanstalk.com/admin/updateTrackingDate?serviceType=\" +\n        serviceType +\n        \"&startDate=\" +\n        startDate.toJSON() +\n        \"&endDate=\" +\n        endDate.toJSON(),\n      requestOptions\n    )\n      .then((response) => {})\n      .then((result) => {\n        this.setState({ changed: false });\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n  setStartDate(date) {\n    this.setState({ startDate: date, changed: true });\n  }\n  setEndDate(date) {\n    this.setState({ endDate: date, changed: true });\n  }\n  onDismiss() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Row>\n          <Col md=\"12\">\n            <Card className=\"main-card mb-3\">\n              <CardBody>\n                <Row md=\"6\">\n                  <InputGroup>\n                    <div\n                      style={{\n                        padding: \"5px\",\n                        backgroundColor: \"#EFF9FF\",\n                        alignSelf: \"center\",\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      <h5 style={{ marginRight: \"20px\" }}>Başlangıç tarihi </h5>\n                      <DatePicker\n                        locale={locale}\n                        selected={this.state.startDate}\n                        onChange={(date) => this.setStartDate(date)}\n                      />\n                    </div>\n                  </InputGroup>\n                </Row>\n                <Row md=\"6\">\n                  <InputGroup>\n                    <div\n                      style={{\n                        marginTop: \"10px\",\n                        padding: \"5px\",\n                        backgroundColor: \"#EFF9FF\",\n                        alignSelf: \"center\",\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                      }}\n                    >\n                      <h5 style={{ marginRight: \"20px\" }}>Bitiş tarihi </h5>\n                      <DatePicker\n                        locale={locale}\n                        selected={this.state.endDate}\n                        onChange={(date) => this.setEndDate(date)}\n                      />\n                    </div>\n                  </InputGroup>\n                </Row>\n                <Row md=\"6\">\n                  <Button\n                    onClick={() => {\n                      this.updateDate(\n                        this.props.data.serviceType,\n                        this.state.startDate,\n                        this.state.endDate\n                      );\n                    }}\n                    active={this.state.changed}\n                    className=\"m-3\"\n                    color=\"primary\"\n                  >\n                    Kaydet\n                  </Button>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nexport default OfficeTrackingDates;\n","import React, { Fragment } from \"react\";\n\nimport PageTitle from \"../../../Layout/AppMain/PageTitle\";\n\n// Examples\nimport OfficeAvailableDates from \"./Examples/OfficeAvailableDates\";\nimport OfficeTrackingDates from \"./Examples/TrackingDatePicker\";\nimport { CardTitle, ModalHeader } from \"reactstrap\";\n\nexport default class CountryTrackerPage extends React.Component {\n  render() {\n    return (\n      <Fragment>\n        <PageTitle\n          heading=\"Randevu Takibi\"\n          subheading=\"Randevu takibi bölümünde, seçili ülkedeki randevuları anlık olarak görebilirsiniz.\"\n          subheading2=\"Veriler direkt olarak ilgili ülkenin randevu sisteminden anlık olarak çekilmektedir. Güncelleme zamanı verinin kaç dakika önce çekildiğini göstermektedir.\"\n          subheading3=\"Takip planlayıcı, hangi aralıklarda yer açılması durumunda size bildirim gönderileceğini belirtmektedir.\"\n          icon=\"pe-7s-glasses icon-gradient bg-love-kiss\"\n        />\n        <div className=\"mbg-3 h-auto ps-0 pe-0 bg-transparent no-border card-header\">\n          <div className=\"card-header-title fsize-2 text-capitalize fw-normal\">\n            <CardTitle>Uygun TARİHLER</CardTitle>\n          </div>\n        </div>\n        <OfficeAvailableDates data={this.props.data} />\n        <div\n          style={{ marginTop: \"3%\" }}\n          className=\"mbg-3 h-auto ps-0 pe-0 bg-transparent no-border card-header\"\n        >\n          <div className=\"card-header-title fsize-2 text-capitalize fw-normal\">\n            <CardTitle>TAKİP PLANLAYICI</CardTitle>\n          </div>\n        </div>\n        <OfficeTrackingDates data={this.props.data} />\n      </Fragment>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\nimport { Route } from \"react-router-dom\";\n\n// COMPONENTS\n\nimport CountryTrackerPage from \"./Notifications/\";\n\n// Tooltips & Popovers\n\n// Layout\n\nimport AppHeader from \"../../Layout/AppHeader/\";\nimport AppSidebar from \"../../Layout/AppSidebar/\";\nimport AppFooter from \"../../Layout/AppFooter/\";\n\nconst Components = ({ match, data }) => (\n  <Fragment>\n    <AppHeader />\n    <div className=\"app-main\">\n      {console.log(data)}\n\n      <AppSidebar data={data} />\n      <div className=\"app-main__outer\">\n        <div className=\"app-main__inner\">\n          {data.data.map((popover, i) => {\n            return (\n              popover &&\n              popover.name && (\n                <Route\n                  key={popover.name}\n                  path={`${match.url}/${popover.name.toLowerCase()}`}\n                  render={(props) => <CountryTrackerPage data={popover} />}\n                />\n              )\n            );\n          })}\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  </Fragment>\n);\n\nexport default Components;\n"],"names":["OfficeAvailableDates","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","getDefaultState","getMinuteDifference","date1","Date","date2","props","data","officeData","activeTab","updateDate","diffInMilliseconds","Math","abs","floor","_createClass","key","value","tab","this","setState","_this2","_jsx","Fragment","children","Row","Col","md","_jsxs","Card","className","CardBody","Nav","pills","fill","map","popover","i","NavItem","NavLink","href","classnames","active","onClick","toggle","officeName","TabContent","TabPane","tabId","dates","date","Alert","color","style","marginLeft","split","CardFooter","Office","AvailableDates","Component","days","months","locale","localize","day","n","month","formatLong","_React$Component","OfficeTrackingDates","serviceType","startDate","endDate","fetch","toJSON","method","redirect","then","response","result","changed","catch","error","console","log","visible","trackingStartDate","trackingEndDate","onDismiss","bind","_assertThisInitialized","InputGroup","padding","backgroundColor","alignSelf","display","flexDirection","marginRight","DatePicker","selected","onChange","setStartDate","marginTop","setEndDate","Button","React","CountryTrackerPage","PageTitle","heading","subheading","subheading2","subheading3","icon","CardTitle","_ref","match","AppHeader","AppSidebar","name","Route","path","url","toLowerCase","render","AppFooter"],"sourceRoot":""}